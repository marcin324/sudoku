{"version":3,"sources":["components/Tile.js","components/Board.js","components/App.js","serviceWorker.js","index.js"],"names":["Tile","props","react_default","a","createElement","className","type","min","max","id","tile","disabled","value","isNaN","onChange","Board","board","map","components_Tile","key","e","updateBoard","initialBoard","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleNewGame","level","state","difficulty","newSudoku","sudoku","generate","setState","toConsumableArray","handleSetDifficulty","target","handleRestart","handleSolve","solve","split","alert","handleCheck","check","console","log","tileValue","correctTileValue","length","splice","preventDefault","name","onClick","components_Board","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b549d3c5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Tile = props => {\r\n  return (\r\n    <div className=\"Tile\">\r\n      <input\r\n        type=\"number\"\r\n        min=\"1\"\r\n        max=\"9\"\r\n        id={props.id}\r\n        tile={props.tile}\r\n        disabled={props.disabled}\r\n        value={!isNaN(props.tile) ? props.tile : \"\"}\r\n        onChange={props.onChange}\r\n        // {...props}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\n","import React from \"react\";\r\nimport Tile from \"./Tile\";\r\n\r\nconst Board = props => {\r\n  const board = props.board.map((tile, id) => (\r\n    <Tile\r\n      type=\"number\"\r\n      min=\"1\"\r\n      max=\"9\"\r\n      key={id}\r\n      id={id}\r\n      tile={tile}\r\n      value={!isNaN(tile) ? tile : \"\"}\r\n      onChange={e => props.updateBoard(e, id)}\r\n      disabled={props.initialBoard[id] !== \".\" ? 1 : 0}\r\n    />\r\n  ));\r\n  return <div className=\"Board\">{board}</div>;\r\n};\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\nimport sudoku from \"sudoku-umd\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const initialBoard = sudoku.generate(\"easy\").split(\"\");\n    this.state = {\n      initialBoard,\n      board: initialBoard,\n      difficulty: \"\"\n    };\n  }\n\n  handleNewGame = () => {\n    const level = this.state.difficulty;\n    const newSudoku = sudoku.generate(level);\n    this.setState({\n      initialBoard: [...newSudoku],\n      board: [...newSudoku]\n    });\n  };\n\n  handleSetDifficulty = e => {\n    const level = e.target.value;\n    const newSudoku = sudoku.generate(level);\n    this.setState({\n      difficulty: e.target.value,\n      initialBoard: [...newSudoku],\n      board: [...newSudoku]\n    });\n  };\n\n  handleRestart = () => {\n    this.setState({\n      board: this.state.initialBoard\n    });\n  };\n\n  handleSolve = () => {\n    const solve = sudoku.solve(this.state.board);\n    if (!solve) {\n      alert(`There is no solution.\\nImprove your sudoku.`);\n    } else {\n      this.setState({\n        board: solve.split(\"\")\n      });\n    }\n  };\n\n  handleCheck = () => {\n    const check = sudoku.solve(this.state.board);\n    console.log(check);\n    if (!check) {\n      alert(`There is no solution.\\nImprove your sudoku.`);\n    } else {\n      alert(`You're on the right way!\\nKeep going!`);\n    }\n  };\n\n  updateBoard = (e, id) => {\n    const board = [...this.state.board];\n    const tileValue = [...e.target.value];\n    const correctTileValue =\n      tileValue.length > 1 ? tileValue.splice(0, 1) : tileValue;\n    board.splice(id, 1, correctTileValue !== \"\" ? correctTileValue : \".\");\n    this.setState({\n      board: board\n    });\n    e.preventDefault();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"App_title\">Sudoku</h1>\n\n        <div className=\"btn_container\">\n          <select\n            className=\"btn_select\"\n            name=\"difficulty\"\n            value={this.state.difficulty}\n            onChange={this.handleSetDifficulty}\n          >\n            <option value=\"easy\">easy</option>\n            <option value=\"medium\">medium</option>\n            <option value=\"hard\">hard</option>\n            <option value=\"very-hard\">very hard</option>\n            <option value=\"insane\">insane</option>\n            <option value=\"inhuman\">inhuman</option>\n          </select>\n\n          <button onClick={this.handleNewGame}>New Game</button>\n          <button onClick={this.handleRestart}>Restart</button>\n          <button onClick={this.handleCheck}>Check</button>\n          <button onClick={this.handleSolve}>Solve</button>\n        </div>\n        <Board\n          board={this.state.board}\n          initialBoard={this.state.initialBoard}\n          updateBoard={this.updateBoard}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}